// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  UserId         String          @id @default(uuid())
  Name           String
  Email          String          @unique
  Password       String
  ProfilePicture String?
  Point          Int             @default(0)
  Age            Int
  CreatedAt      DateTime        @default(now())
  UpdatedAt      DateTime        @updatedAt
  Role           UserRole        @default(USER)
  reservations   Reservation[]
  SearchHistory  SearchHistory[]
}

model Reservation {
  ReservationId   String            @id @default(uuid())
  TotalPrice      Decimal           @db.Decimal(9, 2)
  Reminder1Status Boolean           @default(false)
  Reminder2Status Boolean           @default(false)
  Reminder3Status Boolean           @default(false)
  IsUsed          Boolean           @default(false)
  UserId          String
  ScheduleId      String
  CreatedAt       DateTime          @default(now())
  UpdatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [UserId], references: [UserId], onDelete: Cascade)
  schedule        Schedule          @relation(fields: [ScheduleId], references: [ScheduleId], onDelete: Cascade)
  payment         Payment?
  seats           ReservationSeat[]
}

model Movie {
  MovieId         String          @id @default(uuid())
  Title           String
  Tagline         String
  DurationMinutes Int
  Price           Decimal         @db.Decimal(9, 2)
  Poster          String?
  Backdrop        String?
  Trailer         String?
  Status          Status
  AgeRestriction  AgeRestriction
  ReleaseDate     DateTime?
  VoteAverage     Decimal         @default(0.00) @db.Decimal(4, 2)
  VoteCount       Int             @default(0)
  LanguageId      String
  CreatedAt       DateTime        @default(now())
  UpdatedAt       DateTime        @updatedAt
  language        Language        @relation(fields: [LanguageId], references: [LanguageId])
  genres          MovieGenre[]
  casts           MovieCast[]
  schedules       Schedule[]
  SearchHistory   SearchHistory[]
}

model SearchHistory {
  SearchHistoryId String   @id @default(uuid())
  Query           String
  MovieId         String
  UserId          String
  CreatedAt       DateTime @default(now())
  movie           Movie    @relation(fields: [MovieId], references: [MovieId])
  user            User     @relation(fields: [UserId], references: [UserId])
}

model Language {
  LanguageId String  @id
  Name       String
  movies     Movie[]
}

model Genre {
  GenreId Int          @id
  Name    String
  movies  MovieGenre[]
}

model MovieGenre {
  MovieGenreId String @id @default(uuid())
  MovieId      String
  GenreId      Int
  movie        Movie  @relation(fields: [MovieId], references: [MovieId], onDelete: Cascade)
  genre        Genre  @relation(fields: [GenreId], references: [GenreId], onDelete: Cascade)
}

model Cast {
  CastId    String      @id @default(uuid())
  Name      String
  Image     String?
  Character String
  casts     MovieCast[]
}

model MovieCast {
  MovieCastId String @id @default(uuid())
  MovieId     String
  CastId      String
  movie       Movie  @relation(fields: [MovieId], references: [MovieId], onDelete: Cascade)
  cast        Cast   @relation(fields: [CastId], references: [CastId], onDelete: Cascade)
}

model Cinema {
  CinemaId String  @id @default(uuid())
  Name     String
  Location String
  Contact  String?
  rooms    Room[]
}

model Room {
  RoomId       String     @id @default(uuid())
  Name         String
  SeatCapacity Int
  CinemaId     String
  cinema       Cinema     @relation(fields: [CinemaId], references: [CinemaId], onDelete: Cascade)
  seats        Seat[]
  schedules    Schedule[]
}

model Seat {
  SeatId           String            @id @default(uuid())
  Row              Row
  Number           Int
  RoomId           String
  room             Room              @relation(fields: [RoomId], references: [RoomId], onDelete: Cascade)
  seatReservations ReservationSeat[]
}

model ReservationSeat {
  ReservationSeatId String      @id @default(uuid())
  ReservationId     String
  SeatId            String
  reservation       Reservation @relation(fields: [ReservationId], references: [ReservationId], onDelete: Cascade)
  seat              Seat        @relation(fields: [SeatId], references: [SeatId], onDelete: Cascade)
}

model Schedule {
  ScheduleId   String        @id @default(uuid())
  StartTime    DateTime
  EndTime      DateTime
  RoomId       String
  MovieId      String
  CreatedAt    DateTime      @default(now())
  UpdatedAt    DateTime      @updatedAt
  room         Room          @relation(fields: [RoomId], references: [RoomId], onDelete: Cascade)
  movie        Movie         @relation(fields: [MovieId], references: [MovieId], onDelete: Cascade)
  reservations Reservation[]
}

model Payment {
  PaymentId     String        @id @default(uuid())
  Method        PaymentMethod
  Date          DateTime      @default(now())
  ReservationId String        @unique
  reservation   Reservation   @relation(fields: [ReservationId], references: [ReservationId], onDelete: Cascade)
}

enum Status {
  COMING_SOON
  NOW_SHOWING
  END_OF_SHOWING
}

enum Row {
  A
  B
  C
  D
  E
  F
  G
  H
  I
  J
  K
}

enum UserRole {
  ADMIN
  USER
}

enum AgeRestriction {
  SU
  R13
  D17
}

enum PaymentMethod {
  DANA
  GOPAY
  BCA
  BNI
  MANDIRI
  QRIS
}
